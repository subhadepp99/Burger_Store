{"ast":null,"code":"var _jsxFileName = \"D:\\\\burger\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 4,\n      purchasable: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCounted = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCounted;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCounted = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCounted;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n  }\n\n  updatePurchasedState() {\n    const ingredients = { ...this.state.ingredients\n    };\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disabledInfo,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["D:/burger/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","addIngredientHandler","type","oldCount","updatedCounted","updatedIngredients","priceAddition","oldPrice","newPrice","setState","removeIngredientHandler","priceDeduction","updatePurchasedState","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React ,{Component} from 'react';\r\n\r\nimport Aux from '../../hoc/Aux';\r\nimport Burger from '../../components/Burger/Burger';\r\n\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\n\r\nconst INGREDIENT_PRICES={\r\n    salad :0.5,\r\n    cheese : 0.4,\r\n    meat : 1.3,\r\n    bacon: 0.7\r\n}\r\n\r\nclass BurgerBuilder extends Component {\r\n    state={\r\n        ingredients :{\r\n            salad:0,\r\n            bacon:0,\r\n            cheese:0,\r\n            meat:0\r\n        },\r\n        totalPrice: 4,\r\n        purchasable:false\r\n    }\r\n\r\n\r\n    updatePurchasedState(){\r\n        const ingredients={\r\n            ...this.state.ingredients\r\n        };\r\n        const sum = Object.keys(ingredients).map(igKey=>{\r\n            return ingredients[igKey];\r\n        }).reduce((sum,el)=>{\r\n            return sum  +el;\r\n        },0);\r\n    }\r\n\r\n                        addIngredientHandler =(type)=>{\r\n                    const oldCount=this.state.ingredients[type];\r\n                    const updatedCounted=oldCount +1;\r\n                    const updatedIngredients ={\r\n                    ...this.state.ingredients\r\n                    };\r\n                    updatedIngredients[type]=updatedCounted;\r\n                    const priceAddition =INGREDIENT_PRICES[type];\r\n                    const oldPrice =this.state.totalPrice;\r\n                    const newPrice=oldPrice+priceAddition;\r\n                    this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \r\n\r\n\r\n                    }\r\n\r\n                    removeIngredientHandler =(type)=>{\r\n                        const oldCount=this.state.ingredients[type];\r\n                        if(oldCount <=0){\r\n                            return;\r\n                        }\r\n\r\n                        const updatedCounted=oldCount -1;\r\n                        const updatedIngredients ={\r\n                        ...this.state.ingredients\r\n                        };\r\n                        updatedIngredients[type]=updatedCounted;\r\n                        const priceDeduction =INGREDIENT_PRICES[type];\r\n                        const oldPrice =this.state.totalPrice;\r\n                        const newPrice=oldPrice-priceDeduction;\r\n                        this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \r\n                    }\r\n\r\n    render(){\r\n\r\n\r\nconst disabledInfo={\r\n    ...this.state.ingredients\r\n};\r\nfor(let key in disabledInfo){\r\n    disabledInfo[key]=disabledInfo[key] <=0\r\n}\r\n\r\n        return (\r\n<Aux>\r\n   <Burger ingredients={this.state.ingredients}/>\r\n    <BuildControls \r\n    ingredientAdded={this.addIngredientHandler} \r\n    ingredientRemoved={this.removeIngredientHandler}\r\n   disabled= {disabledInfo}\r\n   price={this.state.totalPrice}\r\n    />\r\n</Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}