{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ui\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Pincode',\n            minLength: 5,\n            maxLength: 5\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          valid: true,\n          validation: {}\n        }\n      },\n      // name:'',\n      // email:'',\n      // address :{\n      //     street :'',\n      //     postal_code:''\n      // },\n      // loading:false,\n      formIsValid: false\n    };\n\n    this.oderderHandler = event => {\n      event.preventDefault();\n      console.log(this.props.ings); //   this.setState({loading:true});\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData\n      };\n      this.props.onOrderBurger(order);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //console.log(event.target.value);\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormELement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormELement.value = event.target.value;\n      updatedFormELement.valid = this.checkValidity(updatedFormELement.value, updatedFormELement.validation);\n      updatedFormELement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormELement;\n      console.log(updatedFormELement);\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.oderderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 20\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      inValid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      clicked: this.oderderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 1\n      }\n    }, \"Order\"));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ContactData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, \"Enter Your ContactData\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["D:/Ui/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","withErrorHandler","actions","connect","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","oderderHandler","event","preventDefault","console","log","props","ings","formData","formElementIdentifier","order","ingredients","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormELement","target","checkValidity","setState","rules","isValid","trim","length","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state={\r\n        orderForm:{\r\n            \r\n                name:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                street:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                zipCode:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Pincode',\r\n                    minLength:5,\r\n                    maxLength:5\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                country:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                email:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your email'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                deliveryMethod :{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                    {value:'cheapest',displayValue:'Cheapest'}\r\n                ]\r\n                },\r\n                value:'',valid:true, validation:{ }\r\n                }\r\n            },\r\n        \r\n        // name:'',\r\n        // email:'',\r\n        // address :{\r\n        //     street :'',\r\n        //     postal_code:''\r\n        // },\r\n        // loading:false,\r\n        formIsValid:false\r\n    }\r\n\r\n    oderderHandler=(event)=>{\r\n        event.preventDefault();\r\n        console.log(this.props.ings);\r\n        //   this.setState({loading:true});\r\nconst formData={};\r\nfor(let formElementIdentifier in this.state.orderForm){\r\n    formData[formElementIdentifier]= this.state.orderForm[formElementIdentifier].value;\r\n}\r\n\r\n                        const order={\r\n                            ingredients:this.props.ings,\r\n                            price:this.props.price,\r\n                           orderData:formData\r\n                            \r\n                        }\r\n\r\n                        this.props.onOrderBurger(order);\r\n\r\n                        \r\n    }\r\n\r\n\r\n\r\n    checkValidity(value,rules){\r\n        let isValid=true;\r\n        if (!rules){\r\n            return true;\r\n        }\r\n\r\nif(rules.required){\r\n    isValid =value.trim() !== ''  && isValid;\r\n\r\n}\r\n\r\n\r\nif(rules.minLength){\r\n    isValid=value.length>= rules.minLength && isValid\r\n}\r\nif(rules.maxLength){\r\n    isValid=value.length<= rules.maxLength && isValid\r\n}\r\nreturn isValid;    \r\n}\r\n\r\ninputChangedHandler=(event,inputIdentifier)=>{\r\n//console.log(event.target.value);\r\nconst updatedOrderForm={\r\n    ...this.state.orderForm\r\n}\r\n\r\nconst updatedFormELement={...updatedOrderForm[inputIdentifier]};\r\nupdatedFormELement.value=event.target.value;\r\nupdatedFormELement.valid=this.checkValidity(updatedFormELement.value,updatedFormELement.validation);\r\nupdatedFormELement.touched=true;\r\n\r\nupdatedOrderForm[inputIdentifier]=updatedFormELement;\r\nconsole.log(updatedFormELement);\r\n\r\nlet formIsValid=true;\r\nfor(let inputIdentifier in updatedOrderForm)\r\n{\r\n    formIsValid =updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n}\r\n\r\nthis.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\r\n\r\n\r\n}\r\n\r\n    render(){\r\n\r\nconst formElementsArray=[];\r\nfor(let key in this.state.orderForm){\r\n    formElementsArray.push({\r\n        id:key,\r\n        config:this.state.orderForm[key],\r\n    \r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n        let form=( <form onSubmit={this.oderderHandler}>\r\n            {/* <Input elementType=\"...\" elementconfig =\"...\" value=\"...\" /> */}\r\n         \r\n            {formElementsArray.map(formElement=>(\r\n                <Input key={formElement.id} elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                inValid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.touched}\r\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\r\n            ))}\r\n         \r\n          \r\n<Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.oderderHandler}>Order</Button>\r\n        </form>);\r\n        if(this.props.loading){\r\n            form=<Spinner />;\r\n        }\r\n        return (\r\n            <div className=\"ContactData\">\r\n                <h4>Enter Your ContactData</h4>\r\n               {form}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps= state=>{\r\n    return{\r\n    ings:state.ingredients,\r\n    price:state.totalPrice,\r\n    loading:state.loading\r\n    };\r\n };\r\n\r\n\r\n const mapDispatchToProps =dispatch=>{\r\n     return{\r\n        onOrderBurger: (orderData)=>  dispatch(actions.purchaseBurger(orderData)),\r\n\r\n     }\r\n    \r\n };\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios)) ;"]},"metadata":{},"sourceType":"module"}