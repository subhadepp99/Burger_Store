{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ui\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from '../../axios-orders';\nimport Aux from '../../hoc/Auxs';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as burgerBuilderActions from \"../../store/actions/index\";\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // ings :null,\n      // purchasable:false,\n      purchasing: false // loading:false,\n      // error:false\n\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      this.props.history.push('/checkout'); // //alert('You Continue');\n      // const queryParams=[];\n      // for(let i in this.state.ingredients){\n      //     queryParams.push(encodeURIComponent(i)+'='+encodeURIComponent(this.state.ingredients[i]));\n      // }\n      // queryParams.push('price='+this.state.totalPrice);\n      // const querystring=queryParams.join('&');\n      // this.props.history.push({\n      //     pathname:'/checkout',\n      //     search:'?'+querystring\n      // });\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    this.props.onInitIngredients();\n  }\n\n  updatePurchasedState(ingredients) {\n    // const ingredients={\n    //     ...this.state.ingredients\n    // };\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0); //this.setState({purchasable:sum>0});\n\n    return sum > 0;\n  } // addIngredientHandler =(type)=>{\n  //    const oldCount=this.state.ingredients[type];\n  //     const updatedCounted=oldCount +1;\n  //      const updatedIngredients ={\n  //         ...this.state.ingredients\n  //          };\n  //                     updatedIngredients[type]=updatedCounted;\n  //                     const priceAddition =INGREDIENT_PRICES[type];\n  //                     const oldPrice =this.state.totalPrice;\n  //                     const newPrice=oldPrice+priceAddition;\n  //                     this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \n  // this.updatePurchasedState(updatedIngredients);\n  //                     }\n  //                     removeIngredientHandler =(type)=>{\n  //                         const oldCount=this.state.ingredients[type];\n  //                         if(oldCount <=0){\n  //                             return;\n  //                         }\n  //                         const updatedCounted=oldCount -1;\n  //                         const updatedIngredients ={\n  //                         ...this.state.ingredients\n  //                         };\n  //                         updatedIngredients[type]=updatedCounted;\n  //                         const priceDeduction =INGREDIENT_PRICES[type];\n  //                         const oldPrice =this.state.totalPrice;\n  //                         const newPrice=oldPrice-priceDeduction;\n  //                         this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \n  //                         this.updatePurchasedState(updatedIngredients);\n  //                     }\n\n\n  render() {\n    const disabledInfo = { ...this.props.ings\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let orderSummary = null;\n    let burger = this.props.error ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 30\n      }\n    }, \"Ingredients can't be loaded\") : /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 65\n      }\n    });\n\n    if (this.props.ings) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdded,\n        ingredientRemoved: this.props.onIngredientRemoved,\n        disabled: disabledInfo,\n        price: this.props.price,\n        ordered: this.purchaseHandler,\n        purchasable: this.updatePurchasedState(this.props.ings),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        purchaseCanceled: this.purchaseCancelHandler,\n        purchasedContinue: this.purchaseContinueHandler,\n        totalprice: this.props.price,\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 22\n        }\n      });\n    } // if(this.state.loading){\n    //     orderSummary=<Spinner />;\n    // }\n\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }, orderSummary), burger);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    error: state.burgerBuilder.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // onIngredientAdded:(ingName)=>dispatch({type:actionTypes.ADD_INGREDIENT,ingredientName:ingName}),\n    // onIngredientRemoved:(ingName)=>dispatch({type:actionTypes.REMOVE_INGREDIENT,ingredientName:ingName})\n    onIngredientAdded: ingName => dispatch(burgerBuilderActions.addIngredient(ingName)),\n    onIngredientRemoved: ingName => dispatch(burgerBuilderActions.removeIngredient(ingName)),\n    onInitIngredients: () => dispatch(burgerBuilderActions.initIngredients())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["D:/Ui/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","axios","Aux","Burger","BuildControls","Modal","OrderSummary","Spinner","withErrorHandler","burgerBuilderActions","BurgerBuilder","state","purchasing","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","props","history","push","componentDidMount","console","log","onInitIngredients","updatePurchasedState","ingredients","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","ings","key","orderSummary","burger","error","onIngredientAdded","onIngredientRemoved","price","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","ingName","addIngredient","removeIngredient","initIngredients"],"mappings":"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","sourcesContent":["import React ,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport axios from '../../axios-orders';\r\nimport Aux from '../../hoc/Auxs';\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as burgerBuilderActions from \"../../store/actions/index\";\r\n\r\n\r\nclass BurgerBuilder extends Component {\r\n    state={\r\n        // ings :null,\r\n        \r\n        // purchasable:false,\r\n        purchasing:false\r\n        // loading:false,\r\n        // error:false\r\n    }\r\n\r\ncomponentDidMount(){\r\n    console.log(this.props);\r\n    this.props.onInitIngredients();\r\n}\r\n\r\n\r\n    updatePurchasedState(ingredients){\r\n        // const ingredients={\r\n        //     ...this.state.ingredients\r\n        // };\r\n        const sum = Object.keys(ingredients).map(igKey=>{\r\n            return ingredients[igKey];\r\n        }).reduce((sum,el)=>{\r\n            return sum  +el;\r\n        },0);\r\n\r\n        //this.setState({purchasable:sum>0});\r\n    return sum>0;\r\n    }\r\n\r\n// addIngredientHandler =(type)=>{\r\n//    const oldCount=this.state.ingredients[type];\r\n//     const updatedCounted=oldCount +1;\r\n//      const updatedIngredients ={\r\n//         ...this.state.ingredients\r\n//          };\r\n//                     updatedIngredients[type]=updatedCounted;\r\n//                     const priceAddition =INGREDIENT_PRICES[type];\r\n//                     const oldPrice =this.state.totalPrice;\r\n//                     const newPrice=oldPrice+priceAddition;\r\n//                     this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \r\n// this.updatePurchasedState(updatedIngredients);\r\n\r\n//                     }\r\n\r\n//                     removeIngredientHandler =(type)=>{\r\n//                         const oldCount=this.state.ingredients[type];\r\n//                         if(oldCount <=0){\r\n//                             return;\r\n//                         }\r\n\r\n//                         const updatedCounted=oldCount -1;\r\n//                         const updatedIngredients ={\r\n//                         ...this.state.ingredients\r\n//                         };\r\n//                         updatedIngredients[type]=updatedCounted;\r\n//                         const priceDeduction =INGREDIENT_PRICES[type];\r\n//                         const oldPrice =this.state.totalPrice;\r\n//                         const newPrice=oldPrice-priceDeduction;\r\n//                         this.setState({totalPrice:newPrice,ingredients:updatedIngredients}); \r\n//                         this.updatePurchasedState(updatedIngredients);\r\n//                     }\r\n\r\n                    purchaseHandler=()=>{\r\n\r\n                        this.setState({purchasing:true});\r\n                    }\r\n\r\n                    purchaseCancelHandler=()=>{\r\n\r\n                        this.setState({purchasing:false});\r\n                    }\r\n\r\n                    purchaseContinueHandler=()=>{\r\n                        this.props.history.push('/checkout');\r\n\r\n                        // //alert('You Continue');\r\n                        // const queryParams=[];\r\n                        // for(let i in this.state.ingredients){\r\n                        //     queryParams.push(encodeURIComponent(i)+'='+encodeURIComponent(this.state.ingredients[i]));\r\n                        // }\r\n                        // queryParams.push('price='+this.state.totalPrice);\r\n                        // const querystring=queryParams.join('&');\r\n                        // this.props.history.push({\r\n                        //     pathname:'/checkout',\r\n                        //     search:'?'+querystring\r\n                        // });\r\n                    }\r\n\r\n    render(){\r\n\r\n\r\nconst disabledInfo={\r\n    ...this.props.ings\r\n};\r\nfor(let key in disabledInfo){\r\n    disabledInfo[key]=disabledInfo[key] <=0\r\n}\r\n\r\nlet orderSummary=null; \r\nlet burger=this.props.error? <p>Ingredients can't be loaded</p>:<Spinner />;\r\nif(this.props.ings){\r\n    burger=(<Aux>\r\n        <Burger ingredients={this.props.ings}/>\r\n        <BuildControls \r\n        ingredientAdded={this.props.onIngredientAdded} \r\n        ingredientRemoved={this.props.onIngredientRemoved}\r\n        disabled= {disabledInfo}\r\n        price={this.props.price}\r\n        ordered={this.purchaseHandler}\r\n        purchasable ={this.updatePurchasedState(this.props.ings)}\r\n        /></Aux>);\r\n        orderSummary=<OrderSummary \r\npurchaseCanceled={this.purchaseCancelHandler}\r\npurchasedContinue={this.purchaseContinueHandler}\r\ntotalprice={this.props.price}\r\n        ingredients={this.props.ings}/>;\r\n}\r\n// if(this.state.loading){\r\n//     orderSummary=<Spinner />;\r\n// }\r\n\r\n        return (\r\n<Aux>\r\n    <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\r\n        {orderSummary}\r\n    </Modal>\r\n   {burger}\r\n</Aux>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps= state=>{\r\n    return{\r\n    ings:state.burgerBuilder.ingredients,\r\n    price:state.burgerBuilder.totalPrice,\r\n    error:state.burgerBuilder.error\r\n    \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps= dispatch=>{\r\nreturn{\r\n// onIngredientAdded:(ingName)=>dispatch({type:actionTypes.ADD_INGREDIENT,ingredientName:ingName}),\r\n// onIngredientRemoved:(ingName)=>dispatch({type:actionTypes.REMOVE_INGREDIENT,ingredientName:ingName})\r\nonIngredientAdded:(ingName)=>dispatch(burgerBuilderActions.addIngredient(ingName) ),\r\nonIngredientRemoved:(ingName)=>dispatch(burgerBuilderActions.removeIngredient(ingName) ),\r\nonInitIngredients :()=>dispatch(burgerBuilderActions.initIngredients())\r\n};\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(BurgerBuilder,axios));"]},"metadata":{},"sourceType":"module"}