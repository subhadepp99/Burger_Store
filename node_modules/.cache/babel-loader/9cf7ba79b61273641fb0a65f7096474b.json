{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      console.log(response.data, 'from purchase burger');\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(err => {\n      dispatch(purchaseBurgerFail(err));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrderSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrderFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrderStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    axios.get('/orders.json').then(res => {\n      console.log(res.data);\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrderSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrderFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Ui/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","console","log","data","name","catch","err","purchaseInit","PURCHASE_INIT","fetchOrderSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrderFail","FETCH_ORDERS_FAIL","fetchOrderStart","FETCH_ORDERS_START","fetchOrders","get","res","fetchedOrders","key","push"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAC,CAACC,EAAD,EAAIC,SAAJ,KAAgB;AAE/C,SAAM;AACVC,IAAAA,IAAI,EAACL,WAAW,CAACM,uBADP;AAEVC,IAAAA,OAAO,EAACJ,EAFE;AAGVC,IAAAA,SAAS,EAACA;AAHA,GAAN;AAKH,CAPM;AASP,OAAO,MAAMI,kBAAkB,GAAEC,KAAD,IAAS;AAErC,SAAM;AACVJ,IAAAA,IAAI,EAACL,WAAW,CAACU,oBADP;AAEVD,IAAAA,KAAK,EAACA;AAFI,GAAN;AAIH,CANM;AAQP,OAAO,MAAME,mBAAmB,GAAC,MAAI;AACjC,SAAM;AACFN,IAAAA,IAAI,EAACL,WAAW,CAACY;AADf,GAAN;AAGH,CAJM;AAQP,OAAO,MAAMC,cAAc,GAAGT,SAAD,IAAa;AACtC,SAAOU,QAAQ,IAAG;AACfA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACCV,IAAAA,KAAK,CAACc,IAAN,CAAW,cAAX,EAA0BX,SAA1B,EACCY,IADD,CACMC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB,EAA0B,sBAA1B;AACAN,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACG,IAAT,CAAcC,IAAf,EAAoBjB,SAApB,CAAtB,CAAR;AACD,KAJD,EAKCkB,KALD,CAKOC,GAAG,IAAE;AACTT,MAAAA,QAAQ,CAACN,kBAAkB,CAACe,GAAD,CAAnB,CAAR;AACF,KAPD;AAQH,GAVD;AAWH,CAZM;AAeP,OAAO,MAAMC,YAAY,GAAC,MAAI;AAC1B,SAAM;AACFnB,IAAAA,IAAI,EAACL,WAAW,CAACyB;AADf,GAAN;AAGH,CAJM;AAOP,OAAO,MAAMC,iBAAiB,GAAEC,MAAD,IAAU;AACrC,SAAM;AACFtB,IAAAA,IAAI,EAACL,WAAW,CAAC4B,oBADf;AAEFD,IAAAA,MAAM,EAACA;AAFL,GAAN;AAIH,CALM;AAQP,OAAO,MAAME,cAAc,GAAEpB,KAAD,IAAS;AACjC,SAAM;AACFJ,IAAAA,IAAI,EAACL,WAAW,CAAC8B,iBADf;AAEFrB,IAAAA,KAAK,EAACA;AAFJ,GAAN;AAIH,CALM;AAQP,OAAO,MAAMsB,eAAe,GAAC,MAAI;AAC7B,SAAM;AACF1B,IAAAA,IAAI,EAACL,WAAW,CAACgC;AADf,GAAN;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAC,MAAI;AAC1B,SAAOnB,QAAQ,IAAG;AACjBb,IAAAA,KAAK,CAACiC,GAAN,CAAU,cAAV,EACClB,IADD,CACMmB,GAAG,IAAE;AACPjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAG,CAACf,IAAhB;AACR,YAAMgB,aAAa,GAAC,EAApB;;AACA,WAAI,IAAIC,GAAR,IAAeF,GAAG,CAACf,IAAnB,EAAwB;AACxBgB,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACf,GAAGH,GAAG,CAACf,IAAJ,CAASiB,GAAT,CADY;AAEflC,UAAAA,EAAE,EAACkC;AAFY,SAAnB;AAIC;;AACDvB,MAAAA,QAAQ,CAACY,iBAAiB,CAACU,aAAD,CAAlB,CAAR;AAEK,KAZD,EAYGd,KAZH,CAYSC,GAAG,IAAE;AACVT,MAAAA,QAAQ,CAACe,cAAc,CAACN,GAAD,CAAf,CAAR;AAEH,KAfD;AAgBA,GAjBD;AAkBF,CAnBM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nexport const purchaseBurgerSuccess=(id,orderData)=>{\r\n\r\n    return{\r\ntype:actionTypes.PURCHASE_BURGER_SUCCESS,\r\norderId:id,\r\norderData:orderData\r\n    }\r\n}\r\n\r\nexport const purchaseBurgerFail=(error)=>{\r\n\r\n    return{\r\ntype:actionTypes.PURCHASE_BURGER_FAIL,\r\nerror:error\r\n    };\r\n}\r\n\r\nexport const purchaseBurgerStart=()=>{\r\n    return{\r\n        type:actionTypes.PURCHASE_BURGER_START\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const purchaseBurger =(orderData)=>{\r\n    return dispatch =>{\r\n       dispatch(purchaseBurgerStart()); \r\n        axios.post('/orders.json',orderData)\r\n        .then(response => {\r\n          console.log(response.data,'from purchase burger');\r\n          dispatch(purchaseBurgerSuccess(response.data.name,orderData));\r\n        })\r\n        .catch(err=>{\r\n           dispatch(purchaseBurgerFail(err));\r\n        } );\r\n    }\r\n}\r\n\r\n\r\nexport const purchaseInit=()=>{\r\n    return{\r\n        type:actionTypes.PURCHASE_INIT\r\n    };\r\n};\r\n\r\n\r\nexport const fetchOrderSuccess=(orders)=>{\r\n    return{\r\n        type:actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders:orders\r\n    };\r\n};\r\n\r\n\r\nexport const fetchOrderFail=(error)=>{\r\n    return{\r\n        type:actionTypes.FETCH_ORDERS_FAIL,\r\n        error:error\r\n    };\r\n};\r\n\r\n\r\nexport const fetchOrderStart=()=>{\r\n    return{\r\n        type:actionTypes.FETCH_ORDERS_START\r\n    };\r\n};\r\n\r\nexport const fetchOrders=()=>{\r\n   return dispatch =>{\r\n    axios.get('/orders.json')\r\n    .then(res=>{\r\n        console.log(res.data);\r\nconst fetchedOrders=[];\r\nfor(let key in res.data){\r\nfetchedOrders.push({\r\n    ...res.data[key],\r\n    id:key\r\n});\r\n}\r\ndispatch(fetchOrderSuccess(fetchedOrders));\r\n\r\n    }).catch(err=>{\r\n        dispatch(fetchOrderFail(err));\r\n\r\n    });\r\n   }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}