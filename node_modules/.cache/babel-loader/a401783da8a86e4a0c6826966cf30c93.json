{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ui\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Pincode',\n            minLength: 5,\n            maxLength: 5\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          valid: true,\n          validation: {}\n        }\n      },\n      // name:'',\n      // email:'',\n      // address :{\n      //     street :'',\n      //     postal_code:''\n      // },\n      loading: false,\n      formIsValid: false\n    };\n\n    this.oderderHandler = event => {\n      event.preventDefault();\n      console.log(this.props.ingredients);\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        console.log(response);\n        this.props.history.push('/');\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //console.log(event.target.value);\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormELement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormELement.value = event.target.value;\n      updatedFormELement.valid = this.checkValidity(updatedFormELement.value, updatedFormELement.validation);\n      updatedFormELement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormELement;\n      console.log(updatedFormELement);\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.oderderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 20\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      inValid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      clicked: this.oderderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 1\n      }\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 18\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ContactData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, \"Enter Your ContactData\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["D:/Ui/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","loading","formIsValid","oderderHandler","event","preventDefault","console","log","props","ingredients","setState","formData","formElementIdentifier","order","price","orderData","post","then","response","history","push","catch","err","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormELement","target","checkValidity","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCM,KAFgC,GAE1B;AACFC,MAAAA,SAAS,EAAC;AAEFC,QAAAA,IAAI,EAAC;AAAEC,UAAAA,WAAW,EAAC,OAAd;AACLC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAC;AAFF,WADT;AAKLC,UAAAA,KAAK,EAAC,EALD;AAMLC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WANN;AAQHC,UAAAA,KAAK,EAAC,KARH;AAQSC,UAAAA,OAAO,EAAC;AARjB,SAFH;AAYFC,QAAAA,MAAM,EAAC;AAAET,UAAAA,WAAW,EAAC,OAAd;AACPC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAC;AAFF,WADP;AAKPC,UAAAA,KAAK,EAAC,EALC;AAMPC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WANJ;AAQLC,UAAAA,KAAK,EAAC,KARD;AAQOC,UAAAA,OAAO,EAAC;AARf,SAZL;AAsBFE,QAAAA,OAAO,EAAC;AAAEV,UAAAA,WAAW,EAAC,OAAd;AACRC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAC,SAFF;AAGVQ,YAAAA,SAAS,EAAC,CAHA;AAIVC,YAAAA,SAAS,EAAC;AAJA,WADN;AAORR,UAAAA,KAAK,EAAC,EAPE;AAQRC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WARH;AAUNC,UAAAA,KAAK,EAAC,KAVA;AAUMC,UAAAA,OAAO,EAAC;AAVd,SAtBN;AAkCFK,QAAAA,OAAO,EAAC;AAAEb,UAAAA,WAAW,EAAC,OAAd;AACRC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,MADK;AAEVC,YAAAA,WAAW,EAAC;AAFF,WADN;AAKRC,UAAAA,KAAK,EAAC,EALE;AAMRC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WANH;AAQNC,UAAAA,KAAK,EAAC,KARA;AAQMC,UAAAA,OAAO,EAAC;AARd,SAlCN;AA4CFM,QAAAA,KAAK,EAAC;AAAEd,UAAAA,WAAW,EAAC,OAAd;AACNC,UAAAA,aAAa,EAAC;AACVC,YAAAA,IAAI,EAAC,OADK;AAEVC,YAAAA,WAAW,EAAC;AAFF,WADR;AAKNC,UAAAA,KAAK,EAAC,EALA;AAMNC,UAAAA,UAAU,EAAC;AACPC,YAAAA,QAAQ,EAAC;AADF,WANL;AAQJC,UAAAA,KAAK,EAAC,KARF;AAQQC,UAAAA,OAAO,EAAC;AARhB,SA5CJ;AAsDFO,QAAAA,cAAc,EAAE;AAChBf,UAAAA,WAAW,EAAC,QADI;AAEhBC,UAAAA,aAAa,EAAC;AACVe,YAAAA,OAAO,EAAC,CACJ;AAACZ,cAAAA,KAAK,EAAC,SAAP;AAAiBa,cAAAA,YAAY,EAAC;AAA9B,aADI,EAER;AAACb,cAAAA,KAAK,EAAC,UAAP;AAAkBa,cAAAA,YAAY,EAAC;AAA/B,aAFQ;AADE,WAFE;AAQhBb,UAAAA,KAAK,EAAC,EARU;AAQPG,UAAAA,KAAK,EAAC,IARC;AAQKF,UAAAA,UAAU,EAAC;AARhB;AAtDd,OADR;AAqEF;AACA;AACA;AACA;AACA;AACA;AACAa,MAAAA,OAAO,EAAC,KA3EN;AA4EFC,MAAAA,WAAW,EAAC;AA5EV,KAF0B;;AAAA,SAiFhCC,cAjFgC,GAiFhBC,KAAD,IAAS;AACpBA,MAAAA,KAAK,CAACC,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,WAAvB;AACE,WAAKC,QAAL,CAAc;AAACT,QAAAA,OAAO,EAAC;AAAT,OAAd;AACV,YAAMU,QAAQ,GAAC,EAAf;;AACA,WAAI,IAAIC,qBAAR,IAAiC,KAAKhC,KAAL,CAAWC,SAA5C,EAAsD;AAClD8B,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAiC,KAAKhC,KAAL,CAAWC,SAAX,CAAqB+B,qBAArB,EAA4CzB,KAA7E;AACH;;AAEuB,YAAM0B,KAAK,GAAC;AACRJ,QAAAA,WAAW,EAAC,KAAKD,KAAL,CAAWC,WADf;AAERK,QAAAA,KAAK,EAAC,KAAKN,KAAL,CAAWM,KAFT;AAGTC,QAAAA,SAAS,EAACJ;AAHD,OAAZ;AAOAnC,MAAAA,KAAK,CAACwC,IAAN,CAAW,cAAX,EAA0BH,KAA1B,EACCI,IADD,CACMC,QAAQ,IAAI;AACd,aAAKR,QAAL,CAAc;AAACT,UAAAA,OAAO,EAAC;AAAT,SAAd;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYW,QAAZ;AACA,aAAKV,KAAL,CAAWW,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OALD,EAMCC,KAND,CAMOC,GAAG,IAAE;AACRhB,QAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACA,aAAKZ,QAAL,CAAc;AAACT,UAAAA,OAAO,EAAC;AAAT,SAAd;AACH,OATD;AAUnB,KA3G+B;;AAAA,SAgIpCsB,mBAhIoC,GAgIhB,CAACnB,KAAD,EAAOoB,eAAP,KAAyB;AAC7C;AACA,YAAMC,gBAAgB,GAAC,EACnB,GAAG,KAAK7C,KAAL,CAAWC;AADK,OAAvB;AAIA,YAAM6C,kBAAkB,GAAC,EAAC,GAAGD,gBAAgB,CAACD,eAAD;AAApB,OAAzB;AACAE,MAAAA,kBAAkB,CAACvC,KAAnB,GAAyBiB,KAAK,CAACuB,MAAN,CAAaxC,KAAtC;AACAuC,MAAAA,kBAAkB,CAACpC,KAAnB,GAAyB,KAAKsC,aAAL,CAAmBF,kBAAkB,CAACvC,KAAtC,EAA4CuC,kBAAkB,CAACtC,UAA/D,CAAzB;AACAsC,MAAAA,kBAAkB,CAACnC,OAAnB,GAA2B,IAA3B;AAEAkC,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAkCE,kBAAlC;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,kBAAZ;AAEA,UAAIxB,WAAW,GAAC,IAAhB;;AACA,WAAI,IAAIsB,eAAR,IAA2BC,gBAA3B,EACA;AACIvB,QAAAA,WAAW,GAAEuB,gBAAgB,CAACD,eAAD,CAAhB,CAAkClC,KAAlC,IAA2CY,WAAxD;AACH;;AAED,WAAKQ,QAAL,CAAc;AAAC7B,QAAAA,SAAS,EAAC4C,gBAAX;AAA4BvB,QAAAA,WAAW,EAACA;AAAxC,OAAd;AAGC,KAvJmC;AAAA;;AA+GhC0B,EAAAA,aAAa,CAACzC,KAAD,EAAO0C,KAAP,EAAa;AACtB,QAAIC,OAAO,GAAC,KAAZ;;AACR,QAAGD,KAAK,CAACxC,QAAT,EAAkB;AACdyC,MAAAA,OAAO,GAAE3C,KAAK,CAAC4C,IAAN,OAAiB,EAAjB,IAAwBD,OAAjC;AAEH;;AAGD,QAAGD,KAAK,CAACnC,SAAT,EAAmB;AACfoC,MAAAA,OAAO,GAAC3C,KAAK,CAAC6C,MAAN,IAAeH,KAAK,CAACnC,SAArB,IAAkCoC,OAA1C;AACH;;AACD,QAAGD,KAAK,CAAClC,SAAT,EAAmB;AACfmC,MAAAA,OAAO,GAAC3C,KAAK,CAAC6C,MAAN,IAAeH,KAAK,CAAClC,SAArB,IAAkCmC,OAA1C;AACH;;AACD,WAAOA,OAAP;AACC;;AA2BGG,EAAAA,MAAM,GAAE;AAEZ,UAAMC,iBAAiB,GAAC,EAAxB;;AACA,SAAI,IAAIC,GAAR,IAAe,KAAKvD,KAAL,CAAWC,SAA1B,EAAoC;AAChCqD,MAAAA,iBAAiB,CAACd,IAAlB,CAAuB;AACnBgB,QAAAA,EAAE,EAACD,GADgB;AAEnBE,QAAAA,MAAM,EAAC,KAAKzD,KAAL,CAAWC,SAAX,CAAqBsD,GAArB;AAFY,OAAvB;AAKH;;AAKO,QAAIG,IAAI,gBAAG;AAAM,MAAA,QAAQ,EAAE,KAAKnC,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGN+B,iBAAiB,CAACK,GAAlB,CAAsBC,WAAW,iBAC9B,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,WAAW,CAACJ,EAAxB;AAA4B,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBtD,WAA5D;AACA,MAAA,aAAa,EAAEyD,WAAW,CAACH,MAAZ,CAAmBrD,aADlC;AAEA,MAAA,KAAK,EAAEwD,WAAW,CAACH,MAAZ,CAAmBlD,KAF1B;AAGA,MAAA,OAAO,EAAE,CAACqD,WAAW,CAACH,MAAZ,CAAmB/C,KAH7B;AAIA,MAAA,cAAc,EAAEkD,WAAW,CAACH,MAAZ,CAAmBjD,UAJnC;AAKA,MAAA,OAAO,EAAEoD,WAAW,CAACjD,OALrB;AAMA,MAAA,OAAO,EAAGa,KAAD,IAAS,KAAKmB,mBAAL,CAAyBnB,KAAzB,EAA+BoC,WAAW,CAACJ,EAA3C,CANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAHM,eAcnB,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,QAAQ,EAAE,CAAC,KAAKxD,KAAL,CAAWsB,WAAhD;AAA6D,MAAA,OAAO,EAAE,KAAKC,cAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAdmB,CAAX;;AAgBA,QAAG,KAAKvB,KAAL,CAAWqB,OAAd,EAAsB;AAClBqC,MAAAA,IAAI,gBAAC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEIA,IAFJ,CADJ;AAOH;;AAjM+B;;AAqMpC,eAAe3D,WAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state={\r\n        orderForm:{\r\n            \r\n                name:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                street:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                zipCode:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Pincode',\r\n                    minLength:5,\r\n                    maxLength:5\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                country:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                email:{ elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your email'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },valid:false,touched:false\r\n                },\r\n                deliveryMethod :{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                    {value:'cheapest',displayValue:'Cheapest'}\r\n                ]\r\n                },\r\n                value:'',valid:true, validation:{\r\n                   \r\n                }\r\n                }\r\n            },\r\n        \r\n        // name:'',\r\n        // email:'',\r\n        // address :{\r\n        //     street :'',\r\n        //     postal_code:''\r\n        // },\r\n        loading:false,\r\n        formIsValid:false\r\n    }\r\n\r\n    oderderHandler=(event)=>{\r\n        event.preventDefault();\r\n        console.log(this.props.ingredients);\r\n          this.setState({loading:true});\r\nconst formData={};\r\nfor(let formElementIdentifier in this.state.orderForm){\r\n    formData[formElementIdentifier]= this.state.orderForm[formElementIdentifier].value;\r\n}\r\n\r\n                        const order={\r\n                            ingredients:this.props.ingredients,\r\n                            price:this.props.price,\r\n                           orderData:formData\r\n                            \r\n                        }\r\n\r\n                        axios.post('/orders.json',order)\r\n                        .then(response => {\r\n                            this.setState({loading:false});\r\n                            console.log(response);\r\n                            this.props.history.push('/');\r\n                        })\r\n                        .catch(err=>{\r\n                            console.log(err);\r\n                            this.setState({loading:false});\r\n                        } );\r\n    }\r\n\r\n\r\n\r\n    checkValidity(value,rules){\r\n        let isValid=false;\r\nif(rules.required){\r\n    isValid =value.trim() !== ''  && isValid;\r\n\r\n}\r\n\r\n\r\nif(rules.minLength){\r\n    isValid=value.length>= rules.minLength && isValid\r\n}\r\nif(rules.maxLength){\r\n    isValid=value.length<= rules.maxLength && isValid\r\n}\r\nreturn isValid;    \r\n}\r\n\r\ninputChangedHandler=(event,inputIdentifier)=>{\r\n//console.log(event.target.value);\r\nconst updatedOrderForm={\r\n    ...this.state.orderForm\r\n}\r\n\r\nconst updatedFormELement={...updatedOrderForm[inputIdentifier]};\r\nupdatedFormELement.value=event.target.value;\r\nupdatedFormELement.valid=this.checkValidity(updatedFormELement.value,updatedFormELement.validation);\r\nupdatedFormELement.touched=true;\r\n\r\nupdatedOrderForm[inputIdentifier]=updatedFormELement;\r\nconsole.log(updatedFormELement);\r\n\r\nlet formIsValid=true;\r\nfor(let inputIdentifier in updatedOrderForm)\r\n{\r\n    formIsValid =updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n}\r\n\r\nthis.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\r\n\r\n\r\n}\r\n\r\n    render(){\r\n\r\nconst formElementsArray=[];\r\nfor(let key in this.state.orderForm){\r\n    formElementsArray.push({\r\n        id:key,\r\n        config:this.state.orderForm[key],\r\n    \r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n        let form=( <form onSubmit={this.oderderHandler}>\r\n            {/* <Input elementType=\"...\" elementconfig =\"...\" value=\"...\" /> */}\r\n         \r\n            {formElementsArray.map(formElement=>(\r\n                <Input key={formElement.id} elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                inValid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.touched}\r\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\r\n            ))}\r\n         \r\n          \r\n<Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.oderderHandler}>Order</Button>\r\n        </form>);\r\n        if(this.state.loading){\r\n            form=<Spinner />;\r\n        }\r\n        return (\r\n            <div className=\"ContactData\">\r\n                <h4>Enter Your ContactData</h4>\r\n               {form}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}